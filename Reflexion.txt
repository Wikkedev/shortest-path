 Apres beaucoup d'essais, en ajoutant un return dans foreach en 209, le programme s'arrete (2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) (3,1) (4,1) (5,1) (5,0) (4,0)
 Fatal error: Uncaught TypeError: Return value of ShortestPathCalculator::getShortestPath() must be an instance of Path, null returned in C:\wamp64\www\shortest-path\object-notworking.php on line 176

 si c'es null, c'est que le chemin n'est pas bon

 je modifie $siblings pour voir si ça marche ...
 oui avec function, non avec object

 notre programme ne retient pas le dernier parcours et recommence toujours le meme à cause de $sibling
 $sibling impose un sens de deplacement (d'abord vers le haut (-1) puis vers la gauche (-1) puisque start est à droite du tableau
 Donc il fera toujours la même chose quand il recommence sauf si on lui dit qu'il l'à déjà fait.
il faudrait stocker le chemin fait dans une tableau et le nouveau chemin est comparé à l'ancien. S'il refait la même chose, on lui dit de faire autrement.

_______________________________________________________________________________________________________________________

en melangeant $siblings (shuffle) j'arrive de manière aléatoire à trouver 8 coups mais des fois 17, 22 14 10 16 15 12 11 23 9
Sans shuffle, j'ai toujours le même resultat en 22 coups :
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) (3,1) (4,1) (5,1) (5,0) (4,0) (5,2) (5,3) (4,3) (3,3) (3,2) (2,2) (3,4) (4,4) (1,0) finish in 22 (0,0)



(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8

C:\wamp64\www\shortest-path\object-notworking.php:200:
object(Path)[5]
  protected 'points' => 
    array (size=8)
      0 => 
        object(Point)[2]
          protected 'column' => int 4
          protected 'row' => int 2
      1 => 
        object(Point)[6]
          protected 'column' => int 4
          protected 'row' => int 1
      2 => 
        object(Point)[10]
          protected 'column' => int 4
          protected 'row' => int 0
      3 => 
        object(Point)[16]
          protected 'column' => int 3
          protected 'row' => int 0
      4 => 
        object(Point)[20]
          protected 'column' => int 2
          protected 'row' => int 0
      5 => 
        object(Point)[24]
          protected 'column' => int 1
          protected 'row' => int 0
      6 => 
        object(Point)[27]
          protected 'column' => int 1
          protected 'row' => int 1
      7 => 
        object(Point)[32]
          protected 'column' => int 0
          protected 'row' => int 1

(2,1) too long (0,0) too long (3,4) too long | | | | | | | | |x|x| | |x| | |x| | |x| | | | | | | |x| | | | | | | |x| 
_____________________________________________________________________________________________________________________

(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8

C:\wamp64\www\shortest-path\object-notworking.php:200:
object(Path)[5]
  protected 'points' => 
    array (size=8)
      0 => 
        object(Point)[2]
          protected 'column' => int 4
          protected 'row' => int 2
      1 => 
        object(Point)[6]
          protected 'column' => int 4
          protected 'row' => int 1
      2 => 
        object(Point)[10]
          protected 'column' => int 4
          protected 'row' => int 0
      3 => 
        object(Point)[16]
          protected 'column' => int 3
          protected 'row' => int 0
      4 => 
        object(Point)[20]
          protected 'column' => int 2
          protected 'row' => int 0
      5 => 
        object(Point)[24]
          protected 'column' => int 1
          protected 'row' => int 0
      6 => 
        object(Point)[28]
          protected 'column' => int 0
          protected 'row' => int 0
      7 => 
        object(Point)[31]
          protected 'column' => int 0
          protected 'row' => int 1

(1,1) too long (3,4) too long | | | | | | | | |x|x| | |x| | |x| | |x| | | | | | | |x| | | | | | | |x| 
___________________________________________________________________________________________________________________
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 8

C:\wamp64\www\shortest-path\object-notworking.php:200:
object(Path)[5]
  protected 'points' => 
    array (size=8)
      0 => 
        object(Point)[2]
          protected 'column' => int 4
          protected 'row' => int 2
      1 => 
        object(Point)[7]
          protected 'column' => int 4
          protected 'row' => int 3
      2 => 
        object(Point)[12]
          protected 'column' => int 3
          protected 'row' => int 3
      3 => 
        object(Point)[16]
          protected 'column' => int 2
          protected 'row' => int 3
      4 => 
        object(Point)[18]
          protected 'column' => int 2
          protected 'row' => int 2
      5 => 
        object(Point)[24]
          protected 'column' => int 1
          protected 'row' => int 2
      6 => 
        object(Point)[26]
          protected 'column' => int 1
          protected 'row' => int 1
      7 => 
        object(Point)[32]
          protected 'column' => int 0
          protected 'row' => int 1

(0,1) too long (3,1) too long (4,3) too long (4,4) too long (1,4) too long | | | | | | | | |x|x| | |x| | |x| | |x| | | | | | | |x| | | | | | | |x| 
_____________________________________________________________________________________________________________________
(2,4) (3,4) (3,3) (3,2) (3,1) (2,1) (1,1) (1,0) finish in 8

C:\wamp64\www\shortest-path\object-notworking.php:201:
object(Path)[5]
  protected 'points' => 
    array (size=8)
      0 => 
        object(Point)[2]
          protected 'column' => int 4
          protected 'row' => int 2
      1 => 
        object(Point)[7]
          protected 'column' => int 4
          protected 'row' => int 3
      2 => 
        object(Point)[12]
          protected 'column' => int 3
          protected 'row' => int 3
      3 => 
        object(Point)[16]
          protected 'column' => int 2
          protected 'row' => int 3
      4 => 
        object(Point)[20]
          protected 'column' => int 1
          protected 'row' => int 3
      5 => 
        object(Point)[22]
          protected 'column' => int 1
          protected 'row' => int 2
      6 => 
        object(Point)[26]
          protected 'column' => int 1
          protected 'row' => int 1
      7 => 
        object(Point)[32]
          protected 'column' => int 0
          protected 'row' => int 1

(0,1) too long (2,2) too long (4,1) too long (4,3) too long (4,4) too long (1,4) too long | |o| | | | |o|o|x|x|(1,4)(D)| |x|o|o|x|o| |x|o|o|o|o| | |o|x|o|o| | | | | |x| 


_____________________________________
Question, comment le programme sait qu'il à trouvé le plus petit chemin ?

_____________________________________________________________________________________________________________

J'essaye d'afficher ce que renvoie le programme  à chaque étape ...
Je vois que dans la fonction displayResult (214) le programme doit afficher des "D", "A", "o" ou "x". Il n'affiche que des "x".
donc c'est que $shortestPath->contains($p) ne contient jamais $p.

Donc quand j'appelle displayResult($map, new Path()), je change new Path() par $sp.
C'est mieux, j'ai des "o" et des "D" (ou qu'il est dédé ?) mais pas de "A"

_________________________________________________________________________________________________________
Le programme vient de ce déplacer en diagonale :

2,4) (3,4) (3,3) (3,2) (3,1) (2,1) (2,2) (1,1) (1,0) finish in 9

C:\wamp64\www\shortest-path\object-notworking.php:201:
object(Path)[5]
  protected 'points' => 
    array (size=9)
      0 => 
        object(Point)[2]
          protected 'column' => int 4
          protected 'row' => int 2
      1 => 
        object(Point)[7]
          protected 'column' => int 4
          protected 'row' => int 3
      2 => 
        object(Point)[12]
          protected 'column' => int 3
          protected 'row' => int 3
      3 => 
        object(Point)[16]
          protected 'column' => int 2
          protected 'row' => int 3
      4 => 
        object(Point)[20]
          protected 'column' => int 1
          protected 'row' => int 3
      5 => 
        object(Point)[22]
          protected 'column' => int 1
          protected 'row' => int 2
      6 => 
        object(Point)[29]
          protected 'column' => int 2
          protected 'row' => int 2
      7 => 
        object(Point)[26]
          protected 'column' => int 1
          protected 'row' => int 1
      8 => 
        object(Point)[30]
          protected 'column' => int 0
          protected 'row' => int 1

(0,1) too long (4,1) too long (4,3) too long (4,4) too long (1,4) too long | |o| | | | |o|o|x|x|(1,4)(D)| |x|o|o|x|o| |x|o|o|o|o| | |o|x|o|o| | | | | |x| 

Je n'avais pas vu ça avant. A surveiller. .... En fait ça le fait quelque fois

_______________________________________________________________________________

//
Maintenant, soit j'ai une erreur ligne 176
Fatal error: Uncaught TypeError: Return value of ShortestPathCalculator::getShortestPath() must be an instance of Path, null returned in C:\wamp64\www\shortest-path\object-notworking.php on line 176

soit il retourn le chemin qu'il à trouvé mais il est dés fois plus long que 8

_______________________________________________________________________________

corection de getStart() pour afficher "D" (reset())

_______________________________________________________________________________

(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (5,0) (4,0) (4,1) (3,1) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 16
|~|~|~|~|~|
|a|o|?|?|~|
|?|o|o|?|d|
|?|o|o|~|o|
|o|o|?|o|o|
|o|o|o|o|?| 


(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) (1,1) (0,1) (0,2) (0,3) (0,4) (1,4) (0,0) (1,0) finish in 16 (3,1) too long (5,3) too long
|o|o|o|o|o|
|o|o|?|?|o|
|?|o|o|?|d|
|?|o|o|o|o|
|~|~|?|o|o|
|~|~|~|a|?| 

______________________________________________________________________________
Au point ou j'en suis, j'ai envie de dire que ce n'est pas possible car 
	- comment le programme sait qu'il à trouvé le plus court chemin ? Si il trouve une solution en 22 coups et qu'apres, il trouve en 18, pourquoi il continuerait ? Et s'il continue, à quel moment il s'arrete de chercher ?

Du coup, j'ai envie de verifier ce que renvoie functional.php en changeant start et end .... ça marche.

______________________________________________________________________________

il faut que j'arrive à stocker tous les chemins trouvés dans un tableau jusqu'à qu'il n'y en ai plus de nouveau puis afficher le plus court ...


Je n'y arrive pas.

J'ai telement foutu le bordel que j'ai repris le code de départ pour recommencer la reflexion avec un peu d'avance quand meme.

J'ai l'impression que quoi qu'il arrive, le programme passe par toutes les cases

Maximum function nesting level of '256' reached, aborting!

(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) (4,1) (3,1) (3,2) (2,2) (2,1) (1,1) (0,1) (0,0) (1,0) finish in 17 
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) too long 
(2,1) too long 
(0,0) too long 
(3,4) too long 
(1,1) too long 
(3,4) too long 
(0,2) too long 
(4,0) too long 
(1,4) too long

|o|o|o|o|o|
|o|o|?|?|o|
|?|~|~|?|d|
|?|~|~|~|a|
|~|~|?|~|~|
|~|~|~|~|?| 

Au lieu de faire un return dans la condition if ($currentPoint->equals($end)) {
Je rappel $this->calculShortestPath($this->map, $this->start, $this->end, new Path());

private function calculShortestPath(Map $map, Point $currentPoint, Point $end, Path $currentPath):void
    {
        debug(PHP_EOL . str_repeat(' ', $currentPath->length()) . $currentPoint);

        $currentPath->addPoint($currentPoint);

        if ($currentPoint->equals($end)) {
            debug(' finish in ' . $currentPath->length());
            $this->shortestPath = $currentPath;

            $this->calculShortestPath($this->map, $this->start, $this->end, new Path());
        }

        if (null !== $this->shortestPath && $currentPath->length() >= $this->shortestPath->length()) {
            debug(' too long');
            //return;
            $this->calculShortestPath($this->map, $this->start, $this->end, new Path());
        }
      
        $siblings = [
            new Point($currentPoint->getRow() - 1, $currentPoint->getColumn()),
            new Point($currentPoint->getRow() + 1, $currentPoint->getColumn()),
            new Point($currentPoint->getRow(), $currentPoint->getColumn() - 1),
            new Point($currentPoint->getRow(), $currentPoint->getColumn() + 1),
        ];

        shuffle($siblings);
      
        foreach ($siblings as $point) {
            if ($map->hasPoint($point) && $map->isAllowed($point) && !$currentPath->contains($point)) {
                $this->calculShortestPath($map, $point, $end, $currentPath);
            }
        }
    }

Avec ce bout de code, je n'ai pas de sortie de boucle. C'est ce que je notais plus haut : Et s'il continue, à quel moment il s'arrete de chercher ?

Pourrait on calculer à l'avance en fonction 
	- du nombre de case impossible
	- du nombre de case total
Le nombre de possibilité de chemin ?
J'ai déjà isAllowed, hasPoint et contains.

est ce 23^4 ? 
du coup je cherche et tombe sur https://fr.wikipedia.org/wiki/Mod%C3%A9lisation_math%C3%A9matique_de_labyrinthe
Modélisation mathématique de labyrinthe

m colonnes par n lignes = (m-1)(n-1) = 4*5 = 20 solutions ?
Peut être.
Après un calcule savant qui est dans ma saccoche, il y a (aurait) 37 chemins possibles (y compris ceux qui n'aboutissent pas )

Donc il faut que je fasse une boucle de 1 à 37 ... c'est nul

(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (5,0) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (3,1) (2,1) (1,1) (0,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8 (2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) too long
(2,4) (3,4) (3,3) (3,2) (3,1) (2,1) (2,2) (1,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (2,1) too long
(2,4) (3,4) (3,3) (3,2) (3,1) (4,1) (5,1) (5,2) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (5,0) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8 (2,4) (3,4) (4,4) (4,3) (5,3) (5,2)
( ! ) Fatal error: Uncaught Error: Maximum function nesting level of '256' reached, aborting! in C:\wamp64\www\shortest-path\object-notworking.php on line 80
( ! ) Error: Maximum function nesting level of '256' reached, aborting! in C:\wamp64\www\shortest-path\object-notworking.php on line 80




(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) (4,1) (3,1) (2,1) (1,1) (0,1) (0,2) (0,3) (0,4) (1,4) (0,0) (1,0) finish in 19
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) (4,0) (5,0) (3,1) (2,1) (2,2) (3,2) (3,3) (1,1) (0,1) (0,0) (1,0) finish in 19
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (3,4) (3,3) (4,3) (5,3) (5,2) (5,1) (5,0) too long
(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (5,0) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 8
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (3,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (3,4) (3,3) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (4,1) too long
(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (2,1) too long
(2,4) (3,4) (3,3) (3,2) (3,1) (4,1) (5,1) (5,2) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (3,4) (3,3)
( ! ) Fatal error: Uncaught Error: Maximum function nesting level of '256' reached, aborting! in C:\wamp64\www\shortest-path\object-notworking.php on line 80


(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) (3,1) (4,1) (4,0) (5,0) (5,1) (5,2) (5,3) (1,1) (0,1) (0,2) (0,3) (0,4) (1,4) (0,0) (1,0) finish in 23
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) (3,1) (3,2) (3,3) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (5,0) (4,0) (4,1) (2,2) (1,0) finish in 22
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) (3,1) (4,1) (4,0) (5,0) (5,1) (5,2) (5,3) (4,3) (4,4) (3,4) (3,3) (3,2) (2,2) (1,0) finish in 22
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (2,2) (2,1) (3,1) (4,1) (4,0) (5,0) (5,1) (5,2) (5,3) (1,1) (1,0) finish in 17
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) (4,0) (5,0) (3,1) (3,2) (2,2) (2,1) (1,1) (1,0) finish in 16
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (2,1) (1,1) (1,0) finish in 10
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (3,1) (2,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (2,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (3,4) (3,3) (4,3) (4,4) (5,3) (5,2) (5,1) too long
(2,4) (3,4) (4,4) (4,3) (3,3) (3,2) (3,1) (2,1) too long
(2,4) (3,4) (3,3) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (3,1) (4,1) too long
(2,4) (3,4) (3,3) (3,2) (2,2) (2,1) (3,1) (4,1) too long
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (1,1) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) (1,0) finish in 8
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1) (4,1) too long
(2,4) (3,4) (4,4) (4,3) (5,3) (5,2) (5,1)
( ! ) Fatal error: Uncaught Error: Maximum function nesting level of '256' reached, aborting! in C:\wamp64\www\shortest-path\object-notworking.php on line 80
( ! ) Error: Maximum function nesting level of '256' reached, aborting! in C:\wamp64\www\shortest-path\object-notworking.php on line 80



Maintenant, il semblerait qu'une fois que le programme trouve "finished in 8", il affiche soit "too long" soit finished in 8
SOLUTION: go to php.ini and comment out php_xdebug-

private function calculShortestPath(Map $map, Point $currentPoint, Point $end, Path $currentPath):void
    {
        
            debug(PHP_EOL . ' ' . $currentPoint);

            $currentPath->addPoint($currentPoint);

            if ($currentPoint->equals($end)) {
              
                debug(' finish in ' . $currentPath->length().'<br>');
                $this->shortestPath = $currentPath;

                $this->calculShortestPath($this->map, $this->start, $this->end, new Path());
              
              
            }

            if (null !== $this->shortestPath && $currentPath->length() >= $this->shortestPath->length()) {
                debug(' too long<br>');
                //return;
                $this->calculShortestPath($this->map, $this->start, $this->end, new Path());
            }

            $siblings = [
                new Point($currentPoint->getRow() - 1, $currentPoint->getColumn()),
                new Point($currentPoint->getRow() + 1, $currentPoint->getColumn()),
                new Point($currentPoint->getRow(), $currentPoint->getColumn() - 1),
                new Point($currentPoint->getRow(), $currentPoint->getColumn() + 1),
            ];

            shuffle($siblings);

            foreach ($siblings as $point) {
                if ($map->hasPoint($point) && $map->isAllowed($point) && !$currentPath->contains($point)) {
                    $this->calculShortestPath($map, $point, $end, $currentPath);
                }
            }
            
       
    }























